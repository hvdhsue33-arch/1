📱 اسم التطبيق:

نظام إبراهيم للمحاسبة

🎯 الفئة المستهدفة:

أصحاب المحلات التجارية.

المشاريع الصغيرة والمتوسطة.

الشركات التي تحتاج نظام محاسبة + إدارة مخزون بسيط وفعال.

⚙️ المتطلبات العامة:

بناء تطبيق ويب متكامل:

Backend: Node.js + Express + MongoDB.

Frontend: React/Next.js + TailwindCSS.

اللغات: العربية (افتراضيًا) + إمكانية إضافة الإنجليزية لاحقًا.

العملات الأساسية:

الليرة السورية.

الليرة التركية.

الدولار الأمريكي.

واجهة حديثة متطورة جدًا: Dashboard تفاعلي + رسوم بيانية + أنيميشن.

دعم كامل للموبايل والكمبيوتر (Responsive).

كل عميل له نسخة مستقلة ببياناته (Multi-Tenant System) في قاعدة البيانات MongoDB.

نشر التطبيق:

Frontend على Netlify.

Backend على Railway أو Heroku.

🧩 الموديولات الأساسية
1. 👤 نظام المستخدمين والصلاحيات (متوسع)

تسجيل الدخول: عبر اسم المستخدم وكلمة المرور فقط من قاعدة البيانات.

تشفير كلمات المرور (bcrypt).

صلاحيات متدرجة (RBAC - Role Based Access Control):

مالك النظام (Super Admin): يرى جميع المتاجر والعملاء، يتحكم في الاشتراكات.

مدير المتجر (Owner): إدارة متجره الخاص فقط + إدارة المستخدمين داخله.

مدير فرعي (Manager): إدارة العمليات المالية والمستودع لكن لا يمكنه تعديل صلاحيات المستخدمين.

محاسب (Accountant): إضافة/تعديل/حذف الإيرادات والمصروفات.

أمين مستودع (Warehouse Keeper): إدارة المنتجات والمخزون فقط.

قارئ (Viewer): مشاهدة البيانات والتقارير فقط.

ضبط الصلاحيات بدقة:

التحكم في من يستطيع "الإضافة، التعديل، الحذف، العرض".

تخصيص صلاحيات مخصصة لكل مستخدم عند الحاجة.

2. 📊 لوحة التحكم (Dashboard)

عرض ملخص فوري:

إجمالي الإيرادات.

إجمالي المصروفات.

صافي الربح.

حالة الاشتراك.

رسوم بيانية يومية – أسبوعية – شهرية (Recharts أو Chart.js).

عرض حالة المخزون (مع تنبيه المنتجات الناقصة).

عرض تنبيهات (انتهاء الاشتراك – انخفاض المخزون – محاولات دخول فاشلة).

3. 💰 الإيرادات (الواردات)

الحقول:

رقم العملية (تلقائي).

التاريخ والوقت.

العميل (اختياري).

نوع العملية (بيع – خدمة – دفعة مسبقة – أخرى).

المنتج/الخدمة.

الكمية.

سعر الوحدة.

العملة (سورية – تركية – دولار).

طريقة الدفع (نقد – بطاقة – حوالة – أخرى).

الملاحظات.

إمكانية البحث + الفلترة حسب التاريخ، العميل، العملة، طريقة الدفع.

4. 💸 المصروفات (الصادرات)

نفس خصائص الإيرادات لكن مع:

اسم المورد/البائع.

نوع المصروف (إيجار – رواتب – خدمات – شراء منتجات...).

5. 🏬 المستودع (إدارة المخزون)

إدارة المنتجات:

اسم المنتج.

النوع/القسم.

وحدة القياس.

الكمية المتوفرة.

سعر الشراء.

سعر البيع.

المورد/البائع.

حساب الربح لكل منتج تلقائيًا.

تنبيهات عند انخفاض الكمية.

تقارير مخزون مفصلة.

6. 📑 التقارير

تقارير مالية يومية/شهرية/سنوّية.

تقارير حسب العملة.

تقارير أرباح المنتجات والمخزون.

إمكانية التصدير إلى:

PDF.

Excel.

إمكانية طباعة الفواتير مباشرة.

7. 🔔 نظام التنبيهات

انتهاء الاشتراك.

انخفاض المخزون.

محاولات دخول خاطئة.

تجاوز حد مالي معين (مثلاً إنفاق أعلى من X دولار).

8. 📦 النسخ الاحتياطي

نسخة احتياطية تلقائية (يومية/أسبوعية).

نسخة احتياطية يدوية عند الطلب.

إمكانية استرجاع البيانات.

9. 🛠️ الاشتراكات والتحكم

كل عميل لديه مدة اشتراك (30 – 90 – 365 يوم).

تنبيه بانتهاء الاشتراك.

إيقاف دخول العميل تلقائيًا عند انتهاء المدة.

تجديد الاشتراك من قبل المالك الأعلى فقط (Super Admin).

💡 ميزات إضافية مستقبلية

دعم الدفع الإلكتروني (PayPal – Stripe – تحويل محلي).

دعم العمل Offline + المزامنة عند الاتصال.

واجهة تقارير مخصصة (العميل يحدد ما يريد عرضه).

تخصيص كامل للشعار والألوان لكل عميل.

واجهة API مفتوحة للتكامل مع تطبيقات أخرى.

📤 المطلوب من الذكاء الصناعي/المطور

بناء Backend كامل (Node.js + Express + MongoDB) مع Authentication وصلاحيات.

بناء Frontend كامل (React/Next.js + TailwindCSS).

تصميم واجهة متطورة بالعربية بشكل افتراضي.

ربط الواجهة مع API.

جعل المشروع جاهز للنشر على Netlify + Railway/Heroku.